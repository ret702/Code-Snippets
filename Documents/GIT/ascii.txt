

In stations and airports you often see this type of screen:
Have you ever asked yourself how it might be possible to simulate this display on a good old terminal? We have: with ASCII art!
  Rules

ASCII art allows you to represent forms by using characters. To be precise, in our case, these forms are words. For example, the word "MANHATTAN" could be displayed as follows in ASCII art:
 
# #  #  ### # #  #  ### ###  #  ###
### # # # # # # # #  #   #  # # # #
### ### # # ### ###  #   #  ### # #
# # # # # # # # # #  #   #  # # # #
# # # # # # # # # #  #   #  # # # #
 

?Your mission is to write a program that can display a line of text in ASCII art in a style you are given as input.
  Game Input
Input

Line 1: the width L of a letter represented in ASCII art. All letters are the same width.

Line 2: the height H of a letter represented in ASCII art. All letters are the same height.

Line 3: The line of text T, composed of N ASCII characters.

Following lines: the string of characters ABCDEFGHIJKLMNOPQRSTUVWXYZ? Represented in ASCII art.
Output
The text T in ASCII art.
The characters a to z are shown in ASCII art by their equivalent in upper case.
The characters that are not in the intervals [a-z] or [A-Z] will be shown as a question mark in ASCII art.
Constraints
0 < L < 30
0 < H < 30
0 < N < 200















using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
/*** Auto-generated code below aims at helping you parse* the standard input according to the problem statement.**/
class Solution
{
    Dictionary<string,
    string[]> map = new Dictionary<string,
    string[]>();
    enum Alphabet
    {
        A,
        B,
        C,
        D,
        E,
        F,
        G,
        H,
        I,
        J,
        K,
        L,
        M,
        N,
        O,
        P,
        Q,
        R,
        S,
        T,
        U,
        V,
        W,
        X,
        Y,
        Z
    };

    static string[][] Letters;
    static void Main(string[] args)
    {

        int L = int.Parse(Console.ReadLine());
        int H = int.Parse(Console.ReadLine());
        string T = Console.ReadLine();
        T = T.ToUpper();
        Letters = new string[H][];

        for (int j = 0; j < H; j++)
        {
            string ROW = Console.ReadLine();
            int count = 0;
            string[] splitRow = new string[27];

            for (int i = 0; i <= ROW.Length; i++)
            {
                if ((i != 0) && (i % L) == 0)
                {
                    //? isnt captured because i is 107 and thats not %=0
                    //  Console.Error.WriteLine(" i index:" + i);
                    // Console.Error.WriteLine(" start index:" + (i - L));
                    splitRow[count] = ROW.Substring((i - L), L);

                    count++;

                }
            }

            Letters[j] = splitRow;
        }

        WriteChars(T, H);

    }

    private static void WriteChars(string input, int height)
    {

        Dictionary<int,
        string> t = new Dictionary<int,
        string>();
        string s = "";

        foreach (char chr in input)
        {
            string chrr = chr.ToString();
            Alphabet parseChr;

            for (int i = 0; i < height; i++)
            {

                if (!t.ContainsKey(i))
                {
                    t.Add(i, "");
                }

                if (Char.IsLetter(chr) && Enum.TryParse<Alphabet>(chrr, out parseChr))
                {

                    // Console.Error.WriteLine("chr is in array "+parseChr.ToString() +   parseChr.GetHashCode());
                    t[i] += Letters[i][parseChr.GetHashCode()];

                }
                else
                {
                    t[i] += Letters[i][26];

                }

            }

        }

        PrintString(t);

    }

    private static void PrintString(Dictionary<int, string> dict)
    {
        for (int i = 0; i < dict.Keys.Count; i++)
        {
            Console.Write(dict[i] + "\n");
        }
    }

}